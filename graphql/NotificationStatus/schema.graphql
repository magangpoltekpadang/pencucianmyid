type NotificationStatus {
  status_id: ID!
  status_name: String!
  code: String!
  description: String!
  created_at: DateTime!
  updated_at: DateTime!
}

input NotificationStatusInput {
  status_name: String
  code: String
  description: String
}

input NotificationStatusCreateInput {
  status_name: String
  code: String
  description: String
}

input NotificationStatusFilter {
  id: ID
  search: String @where(operator: "like")
}

extend type Query {
  notificationstatuses(
    search: String
  ): [NotificationStatus!]! @all(model: "App\\Models\\NotificationStatus\\NotificationStatus")

  notificationstatus(status_id: ID! @eq(key: "status_id")): NotificationStatus
  @find(model: "App\\Models\\NotificationStatus\\NotificationStatus")
}

extend type Mutation {
  createNotificationStatus(input: NotificationStatusCreateInput! @spread): NotificationStatus
    @create(model: "App\\Models\\NotificationStatus\\NotificationStatus")

  updateNotificationStatus(
    status_id: ID! @eq(key: "status_id"),
    input: NotificationStatusInput! @spread
  ): NotificationStatus @update(model: "App\\Models\\NotificationStatus\\NotificationStatus")
    
  deleteNotificationStatus(status_id: ID! @eq(key: "status_id")): NotificationStatus
    @delete(model: "App\\Models\\NotificationStatus\\NotificationStatus")

}

type NotificationStatusPaginator {
  data: [NotificationStatus!]!
  paginatorInfo: paginatorInfo!
}