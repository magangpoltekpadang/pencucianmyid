type PaymentStatus {
  payment_status_id: ID!
  status_name: String!
  code: String!
  description: String!
  created_at: DateTime!
  updated_at: DateTime!
}

input PaymentStatusInput {
  status_name: String
  code: String
  description: String
}

input PaymentStatusCreateInput {
  status_name: String
  code: String
  description: String
}

input PaymentStatusFilter {
  id: ID
  code: String
  search: String @where(operator: "like")
}

extend type Query {
  paymentstatuses(
    search: String
  ): [PaymentStatus!]! @all(model: "App\\Models\\PaymentStatus\\PaymentStatus")

  paymentstatuse(payment_status_id: ID! @eq(key: "payment_status_id")): PaymentStatus
  @find(model: "App\\Models\\PaymentStatus\\PaymentStatus")
}

extend type Mutation {
  createPaymentStatus(input: PaymentStatusCreateInput! @spread): PaymentStatus
    @create(model: "App\\Models\\PaymentStatus\\PaymentStatus")

  updatePaymentStatus(
    payment_status_id: ID! @eq(key: "payment_status_id"),
    input: PaymentStatusInput! @spread
  ): PaymentStatus @update(model: "App\\Models\\PaymentStatus\\PaymentStatus")
    
  deletePaymentStatus(payment_status_id: ID! @eq(key: "payment_status_id")): PaymentStatus
    @delete(model: "App\\Models\\PaymentStatus\\PaymentStatus")

}

type PaymentStatusPaginator {
  data: [PaymentStatus!]!
  paginatorInfo: paginatorInfo!
}